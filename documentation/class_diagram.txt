@startuml
scale 1800*900
enum CardType {
    monster
    spell
}

enum ElementType {
    fire
    water
    normal
}

enum MonsterType {
    Goblin
    Dragon
    Wizard
    Ork
    Knight
    Kraken
    Elf
    Troll
}

abstract class Card {
    +<<get>> -<<set>> Id : Guid
    +<<get>> -<<set>> Name : String
    +<<get>> -<<set>> Damage : int
    +<<get>> -<<set>> ElementType : ElementType

    +{method} Card(id : Guid, name : String, damage : int)
    +{method} ToString() : string
}

class MonsterCard{
    +<<get>> -<<set>> MonsterType : MonsterType

    +{method} MonsterCard(id : Guid, name : String, damage : int)
    +{method} ToString() : string
}

class SpellCard {
    +{method} SpellCard(id : Guid, name : String, damage : int)
}

interface IRule {
    CheckRule(card1 : Card, card2 : Card, calcDamage1 : double, calcDamage2 : double) : bool
}

class ElementRule {
    +<<get>> -<<set>> Element1 : ElementType
    +<<get>> -<<set>> Element2 : ElementType
    +<<get>> -<<set>> Multiplier1: double
    +<<get>> -<<set>> Multiplier2 : double

    +{method} ElementRule(element1 : ElementType, element2 : ElementType, multiplier1 : double, multiplier2 : double)
    +{method} CheckRule(card1 : Card, card2 : Card, calcDamage1 : double, calcDamage2 : double) : bool
}

class SpecialRule {
    +<<get>> -<<set>> CardName1 : string
    +<<get>> -<<set>> CardName2 : string
    +<<get>> -<<set>> Damage1? : double
    +<<get>> -<<set>> Damage2? : double

    +{method} SpecialRule (cardName1 : string, cardName2 : string, damage1 : double?, damage2 : double?)
    +{method} CheckRule(card1 : Card, card2 : Card, calcDamage1 : double, calcDamage2 : double) : bool
}

class RuleSet {
    -{static} elementRules : List<ElementRule>
    -{static} specialRules : List<SpecialRule>

    -{method} {static} CompareElementType(card1 : Card, card2 : Card, calcDamage1 : double, calcDamage2 : double) : Tuple<double, double>
    -{method} {static} CompareSpecialRule(card1 : Card, card2 : Card, calcDamage1 : double, calcDamage2 : double) : Tuple<double, double>
    -{method} {static} CompareAllRules(user1 : string, user2 : string card1 : Card, card2 : Card, calcDamage1 : double, calcDamage2 : double) : Tuple<double, double>
}

class Package {
    +<<get>> -<<set>> Id : Guid
    +<<get>> -<<set>> Cards : List<Card>

    +{method} Package(id : Guid, cards : List<Card>)
    +{method} AquirePackage(user : User) : void
}

class User { 
    +<<get>> -<<set>> Id : Guid
    +<<get>> -<<set>> Username : String
    +<<get>> -<<set>> Password : String

    +{field} <<get, set>> Name : String
    +{field} <<get, set>> Bio : String
    +{field} <<get, set>> Image : String
    +{field} <<get, set>> Coins : int
    +{field} <<get, set>> GamesPlayed : int
    +{field} <<get, set>> GamesWon : int
    +{field} <<get, set>> Elo : int
    +{field} <<get, set>> Stack : List<Card>
    +{field} <<get, set>> Deck : List<Card>
    +{field} <<get, set>> Friends : List<Guid>

    +{method} User(id : Guid, username : string, password : string)
    +{method} ToString() : string
    +{method} SetUserData(name : string, bio : string, image : string) : void
    +{method} GetCardFromDeck() : Card
    +{method} ConfigureDeck(guids : List<Guid>) : void
    +{method} AddFriend(other : User) : void
    +{method} RemoveFriend(other : User) : void
    +{method} GetUserData(isJson : bool) : string
    +{method} GetUserStats(isJson : bool) : string
    +{method} DeckToString(isJson : bool) : string
    +{method} StackToString(isJson : bool) : string

}

class Trade {
    +<<get>> -<<set>> Id : Guid
    +<<get>> -<<set>> CardToTrade : Card
    +<<get>> -<<set>> Provider : User
    +<<get>> -<<set>> CardType : CardType
    +<<get>> -<<set>> MinimumDamage : int

    +{method} Trade(id: Guid, cardToTrade : Card, user : User, cardType : CardType, minimumDamage : int)
    +{method} ToString() : string
    +{method} TradeCard(u2 : User, cardForTrade : Card) : void
    +{method} TradeToString(json : bool) : string
}

class Battle {
    +<<get>> -<<set>> Id : Guid
    +<<get>> -<<set>> User1 : User
    +<<get>> -<<set>> User2 : User

    -log : string
    -deck1 : List<Card>
    -deck2 : List<Card>
    -waitHandle : AutoResetEvent

    +{method} Battle(id : Guid, user1 : User)
    +{method} InitializeBattle() : string
    +{method} Play(user2 : User) : string

    -{method} BattleResult() : string
    -{method} CompareCards(round : int) : string
    -{method} CalculateStatsAfterBattle(winner : User, loser : User, draw : bool) : void
    -{method} GiveCard(winner : User, loser : User, draw : bool) : void
}

Card<|--MonsterCard
Card<|--SpellCard

IRule<|--ElementRule
IRule<|--SpecialRule
RuleSet "0,1" o-- "*" IRule: contains
Battle --> RuleSet: uses

Card -- ElementType
MonsterCard -- MonsterType
Trade -- CardType

Package "0,1" o-- "5" Card: contains
User "0,1" o-- "*" Card: contains

Trade "0,1" o-- "1" Card: contains
Trade "*" o-- "1" User: contains

Battle "0,1" o-- "2" User: contains
@enduml