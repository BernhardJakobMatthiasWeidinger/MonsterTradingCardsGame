1. Design
I split up the main logic of my project into 4 parts: 
The models, which contains data of each entity (f.e. the User or Card class),
the Data Access Layer (DAL), which contains and processes all entities (f.e. DBBattleRepository),
the MTCGManager, which contains all repositories and 
the Route Commands, which handles all requests from clients.

	1.1 Models (Class Diagram: class_diagramm.png)
	1.1.1 Cards: 	There are 2 types of cards: Monster- and Spell-Cards. 
					Each Card contains an element type and monster cards additionally a monster
					type. Each type will be classified by the card name.
	1.1.2 Users:	This class contains all relevant data of a user, like its 
					username, coins, stats and stack.
	1.1.3 Packages: A package only contains a list of cards. This package will be deleted, after
					a user buys it with 5 coins.
	1.1.4 Trades:	A trade contains a card, which is offered to be traded, the user, 
					which provided this card and the conditions of the other card.
	1.1.5 Rules:	There are 2 kinds of rules: Element- and Special-Rules. 
					An element rule contains each element type, which effects each other and 
					the multipliers, how the card damage should be affected
					(f.e. new ElementRule(ElementType.fire, ElementType.normal, 2, 0.5) means
					the damage of the fire card will be doubled, the damage of the normal card will be halved).
					A special rule contains substrings of the card names, which effects each other and
					the new damage of the cards. If a damage is set to null, the damage won't be changed
					(f.e. new SpecialRule("goblin", "dragon", 0, null) means, that the damage of 
					any goblin card will be set to 0 for a round, the damage of the dragon card stays the same).
	1.1.6 RuleSet:	This class contains all element and special rules and how they are applied. 
					In this case, if a special rule will be activated, no element rule will be applied.
	1.1.7 Battle:	This class processes the fight of 2 users and returns a log to each user. It
					uses the RuleSet class to compare the cards.
	
	1.2 DAL
	The DAL consists of 4 repositories: 
	DBBattleRepository, DBPackageRepository, DBTradeRepository and DBUserRepository.
	Each repository uses a database connection, to select, insert, update and delete the data and
	also contains a list of each entity to cache the data, so the server doesn't have to call the 
	database for each select statement.
	1.2.1 DBBattleRepository: This repository manages all battles.
	1.2.2 DBPackageRepository: This repository manages all packages.
	1.2.3 DBTradeRepository: This repository manages all trades.
	1.2.4 DBUserRepository: This repository manages all users, its cards (stack and deck) and 
					friend relationships (chapter 4).
	
	1.3 MTCGManager
	This manager contains all repositories and uses them to handle the entire logic of the server.
	
	1.4 Route Commands
	Route commands will be used to handle incoming requests. Each command only contains an
	execute method, which processes the requests and returns a fitting response.
	There are 2 types of commands: RouteCommands and ProtectedRouteCommands. 
	RouteCommands can be executed by any client, ProtectedRouteCommands only from clients with 
	a valid token (which will be returned by the "normal" RouteCommands).

2. Lessons learned

	2.1 Battle Log
	One problem arised, when I tried to return the battle log to each of 
	the participating players, but that was not possible, because only 
	the joining user would call the battle function and in that case, 
	only that user would get the log.
	My solution was to add another function for the first user, 
	which only waits, until the battle is finished and then returns 
	the completed log. I implemented this with the AutoResetEvent
	class, which blocks a single thread (waitHandle.WaitOne()) until it
	is released (waitHandle.Set()).

	2.2 SQL Injection and SQL Parameters
	At first, I wanted to add all values in my SQL commands in the 
	corresponding methods by simply adding it into the string, but then 
	SQL injection would be possible.
	Instead, I used SQL parameters, so SQL injection would not be 
	possible.

	2.3 Repository Pattern
	My first thought was to create a central class, which manages all 
	DML (Data Manipulation Language) Operations and stores all 
	collections for users, packages etc, which could have worked, 
	but then there would only be one single class with countless methods 
	and readability would be much harder.
	Instead, I used the Repository Pattern, with it, each logic and data 
	access is encapsulated from one another and readability of the class 
	is much easier.

3. Unit Testing
For the unit tests I tested all models (view class_diagramm.png) 
with their respective constructors and their public methods.
For each method, which throws exceptions, I split them up into a test 
with no error and tests with errors (for each error another test). 
Furthermore, I wrote multiple test cases for each test, so that all 
possible code paths are covered.

	3.1 Method names with no exception
	The basic structure of my test names is as follows: testMethod or testMethod_explanation. 
	For the explanation, I either wrote the expected result 
	(f.e. testGetUserData_plain and testGetUserData_json) or the expected behavior 
	(f.e. testCompareAllRules_noCalculation and testCompareAllRules_withCalculation)

	3.2 Method names with exception
	If the method throws an error, I designed additional test cases, 
	which I named testMethod_throwsExcpetion or testMethod_throwsExcpetionExplanation.
	For the explanation, I simply wrote the reason why the error should be thrown
	(f.e. testConfigureDeck_throwsExceptionInvalidCard).

4. Unique Feature - Friends
As a mandatory unique feature, I added a the functionality of friends. 
I added a table "friends" into the database, which consists of two columns 
with the IDs of the befriended users. 
At the server itself, I added a list of Guids to the user class, 
which stores the IDs of the befriended users. 

	4.1 Add Friends	
	The first feature is the possibility to add friends. To add a user as a friend, 
	send the request POST /friends with the username of the friend as a payload, 
	the IDs of the users will be added to the database and to the Guid lists.

	4.2 Show List of Friends
	With the request GET /friends, the server returns a list of the data, 
	either json or plain format, of all your friends. 
	The data contains the ID, username, alternative name, bio, image, 
	coins, the stats and also the IDs of their friends.

	4.3 Battle Friends
	Users can join specific battles with the request POST /battles/{username}. 
	This only works if the user, which started the battle, 
	is befriended with the joining user.

	4.4 Remove Friends
	With the request DELETE /friends and the username as the payload, 
	the users will no longer be befriended. The relationship in the database and 
	also the IDs in the corresponding lists will be deleted. 
	
5. Tracked Time: tracked_time.pdf

6. Link to Git: https://github.com/BernhardJakobMatthiasWeidinger/MonsterTradingCardsGame.git